---
# This top-most (level=0) section will not generate trays.  
# The only things that belong here are default settings that 
# will be applied to all teh generators defined in this file.
# Each of these settings can, however, be overridden in each
# generator section.
units: in
model_format: 3mf
output_folder: output/mytrays
flat: false

# Here begins a list of generators.  If you only eant to 
# generate certain ones in a run, then use the -g/--gen_list
# cli param to list the ones you want to generate.  This is 
# great for debugging new generators without having to deal
# with the others.
generators:

  # Each generate starts with a good name
  knife_tray:
    # Models generated by this generator will not have a file 
    # prefixe appended.  "none" is a special word, so you cannot
    # actually have a file prepended with none, but you could use
    # "none_" if you really wanted.
    file_prefix: none

    # This demonstrates how to render OpenSCAD presets.  To use 
    # you need to create your object in OpenSCAD and save it as a
    # preset, then reference the name here.
    openscad_presets_file: tray_generator.json
    openscad_preset_names: Knife_Tray_Main Knife_Tray_Insert

  # A new generator, with a new unique nam.  This tray is a
  # main tray that provides storage space in the bottom and
  # corner posts that allow an insert tray to rest flush with
  # the top edge.
  tray_with_insert_main:

    # This key allows you to control which folder the models
    # in this generator will be placed (assuming flat=false)
    output_subfolder: knife_tray

    # A filename prefix appropriate for these models
    file_prefix: blade_storage_

    # Just a single tray 8 units long by 4 units wide x 2 units high
    dimensions: 8x4x2

    # This tray is not intended to be stackable so we set all the 
    # interlock dimensions to 0.0
    interlock_dimensions: 0.0 0.0 0.0

    # This key demonstrates how to pass additional OpenSCAD variables
    # to OpenSCAD.  This is useful for OpenSCAD variables that have not
    # been mapped or abstracted to make_tray parameters.
    other_oscad_params: >
      Add_Corner_Posts=true
      Corner_Post_Size=0.25
      Insert_Tray_Height=0.75

  # This is the insert tray that fits into the one above.  Notice the
  # Make_Tray_Insert variable below.  
  tray_insert:
    # Same output folder as above
    output_subfolder: knife_tray
    file_prefix: blade_storage_insert_
    # Note how the 8x4 dimension is the same as the main tray above. The
    # Make_Insert_Tray and Insert_Tray_Gap variables below tell the
    # generator to resize this tray to fit into an 8x4 shell.  Also
    # notice that the 0.75 height here matches the Insert_Tray_Height
    # variable in the main tray.
    dimensions: 8x4x0.75

    # Ensure the insert does not have stacking geometry.
    interlock_dimensions: 0.0 0.0 0.0

    # This is a customColRow layout.  Typically these are "created" using
    # the customizer in the OpenSCAD GUI, then the paramters are copied
    # into the appropriate variables.  Doing this allows you to create
    # different sized trays (unlike a customizer preset) 
    custom_layouts:
      customColRows:
        knife_holder_insert:
          Custom_Col_Row_Ratios: "[1, 2, 1, 7, 0, 1, 0, 6]"
    other_oscad_params: >
      Make_Insert_Tray=true
      Insert_Tray_Gap=0.03
      Divider_Wall_Height_Scale=0.65
      Make_Finger_Slots=true
      Finger_Slot_Position=0.77
      Finger_Slot_Lift=0.15
      Finger_Slot_Radius=2.0
      Lengthwise_Finger_Slot=false

  some_trays:
    file_prefix: tray_
    dimensions: 8x4x1 8x2x1

    # These trays will have square storage cups.  Variants of each
    # size will be created for every possible square cup size that fits.
    make_square_cups: true
    # But wee want to ensure that no cups are smaller than 2 units on a 
    # side.  You can omit this to get 1 unit cups, or even change this to
    # 0.5 to get half-unit cups (or go even smaller if that makes sense to you)
    length_div_minimum_size: 2


  stl_trays:
    # These tray will be generated to STL file
    model_format: stl
    file_prefix: stl_
    lengths: 4 6
    widths: 2 4
    heights: 2

  tray_with_divisions:
    dimensions: 8x8x1
    # This setting will generates (many) variants of the 8x8x1 tray with all
    # combinations of unit sized divisions.  Render previews and have a look.
    make_divisions: true

  # Just to show that you can mix in and cm in the same config file
  some_metric_trays:
    units: cm
    file_prefix: metric_
    dimensions: 8x8
    heights: 2 3 5
    make_square_cups: true

  # These are a couple of custom tray layouts designed specifically to hold
  # metric M-sized bolts, nuts, washers, and inserts.  The M$ specification 
  # include one more standard bolt length than M2 thru M3 so that is why there
  # are two layous defined below.
  m-size-bolt-trays:
    file_prefix: none
    dimensions: 8x4x1 6x3x1
    custom_layouts:
      customColRows:
        M4_Bolt_Layout:
          # Custom_Col_Row_Ratios lets you divide a tray into custom sized row or columns
          # with each row or column having custom placed dividers.  In this list, the 
          # '0' values are special and demark different sections. If we break it into
          # sections, we get:
          #
          #    [1, 5, 3, 3, 3, 1.5, 3] + [4] + [4] + [3] + [2] + [5]
          #
          # The first section defines the number of row or columns the tray will have
          # and the size of those rows or columns.  The first value '1' says that we
          # are defining rows (use any other value for columns).  The second value '5'
          # says we want 5 rows in this tray.  The next 5 values (which corespond to the
          # 5 count of rows) defiune the relative size of each row by ratios. So looking 
          # at the values (3, 3, 3, 1.5, 3). Rows 1, 2, 3, and 5 will all be the same
          # size, while row 4 will be half the size of the others.
          #
          # Now notice that there are 5 additional sections.  These define how many
          # divisions we want on each row.  In this case they are all just single nmumbers
          # meaning that each row will be divded equally into the specified number of
          # cups.  But you can give ratios as well, like [4 2 1 1 2] where we want 4 division
          # with the outer most 2 divisions being twice as wide as the inner-most two division.
          Custom_Col_Row_Ratios: "[1, 5, 3, 3, 3, 1.5, 3, 0, 4, 0, 4, 0, 3, 0, 2, 0, 5]"
        M2_M3_Bolt_Layout:
          Custom_Col_Row_Ratios: "[1, 5, 2, 2, 2, 1.5, 2, 0, 3, 0, 3, 0, 3, 0, 2, 0, 5]"

  # This is just an odd tray with 4 chambers demonstrating the Custom_Division_List
  # layout type.
  odd_custom_tray:
    file_prefix: none
    dimensions: 8x3x1 6x4x1
    custom_layouts:
      customDivisions:
        Four_Chamber_Cross:
          Custom_Division_List: "[0, 0.333, 0, 0.666, 0, 0.666, 0.333, 1, 1, 0.333, 0.333,
            1, 1, 0.666, 0, 0.666]"

  # The remaining trays are mostly just for my testing until I get them migrated to 
  # pytest.
  some_more_trays:
    file_prefix: tray_
    lengths: 2 4 6
    widths: 2 4
    heights: 1 2

  tray_test_1:
    file_prefix: test1_
    lengths: 4
    widths: 4
    heights: 2
